Here’s a step-by-step guide to developing a fraud detection system using the **Credit Card Fraud Detection dataset** from Kaggle:  

### **Step 1: Download and Load the Dataset**  
1. Download the dataset from [Kaggle](https://www.kaggle.com/datasets/mlg-ulb/creditcardfraud).  
2. Extract the `creditcard.csv` file and place it in your working directory.  
3. Load the dataset using **Pandas**:  

```python
import pandas as pd

# Load the dataset
df = pd.read_csv("creditcard.csv")

# Display basic information
print(df.info())
print(df.head())  # Show first few rows
```

---

### **Step 2: Data Preprocessing**  
The dataset contains **imbalanced classes** (fraud cases are much fewer than normal transactions), so we need to handle this properly.  

#### **2.1 Check Class Distribution**  
```python
print(df['Class'].value_counts(normalize=True))  # Check class imbalance
```
- This will show that **fraudulent transactions (Class = 1) are much fewer than normal ones (Class = 0).**  

#### **2.2 Feature Scaling**  
Since the `Amount` and `Time` features are not scaled, we standardize them:  

```python
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
df[['Amount', 'Time']] = scaler.fit_transform(df[['Amount', 'Time']])
```

#### **2.3 Handle Imbalanced Data Using SMOTE**  
To balance the dataset, we use **Synthetic Minority Over-sampling Technique (SMOTE):**  

```python
from imblearn.over_sampling import SMOTE
from sklearn.model_selection import train_test_split

# Separate features and target
X = df.drop(columns=['Class'])
y = df['Class']

# Split the data (80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Apply SMOTE to the training data
smote = SMOTE(random_state=42)
X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)
```

---

### **Step 3: Model Training**  
We train a **Random Forest Classifier**, which performs well for fraud detection.  

```python
from sklearn.ensemble import RandomForestClassifier

# Initialize the model
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)

# Train the model
rf_model.fit(X_train_resampled, y_train_resampled)
```

---

### **Step 4: Model Evaluation**  
To evaluate the model, we check **precision, recall, and F1-score** using a classification report:  

```python
from sklearn.metrics import classification_report, confusion_matrix

# Predict on the test set
y_pred = rf_model.predict(X_test)

# Print evaluation metrics
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))
```
- **Precision:** How many predicted fraud cases were actually fraud?  
- **Recall:** How many real fraud cases were correctly identified?  
- **F1-score:** A balance between precision and recall.  

---

### **Step 5: Testing Interface**  
We create a **command-line interface** where users can input transaction details for fraud detection.  

```python
import numpy as np

def test_fraud_detection(model, scaler):
    print("Enter transaction details:")
    amount = float(input("Amount: "))
    time = float(input("Time: "))

    # Create a DataFrame for the input
    input_data = pd.DataFrame([[time, amount]], columns=['Time', 'Amount'])

    # Scale the input data
    input_data[['Amount', 'Time']] = scaler.transform(input_data[['Amount', 'Time']])

    # Predict
    prediction = model.predict(input_data)

    if prediction[0] == 1:
        print("⚠️ Fraudulent transaction detected!")
    else:
        print("✅ Transaction is normal.")

# Example usage
test_fraud_detection(rf_model, scaler)
```

---

### **Next Steps**  
- **Improve the Model:** Try using **XGBoost** or **Logistic Regression** to compare performance.  
- **Feature Engineering:** Include additional transaction metadata if available.  
- **Deploy as an API:** Use **Flask** or **FastAPI** to create a web-based fraud detection system.  

This step-by-step process will help you build a basic fraud detection system using **Machine Learning**. Let me know if you need further explanations!
